{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\odrag\\\\OneDrive\\\\Desktop\\\\FACULTATE AN 4 SEM 1\\\\SD\\\\DS202230643_Dragusanu_Octavian_1_Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\odrag\\\\OneDrive\\\\Desktop\\\\FACULTATE AN 4 SEM 1\\\\SD\\\\DS202230643_Dragusanu_Octavian_1_Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\odrag\\\\OneDrive\\\\Desktop\\\\FACULTATE AN 4 SEM 1\\\\SD\\\\DS202230643_Dragusanu_Octavian_1_Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\odrag\\\\OneDrive\\\\Desktop\\\\FACULTATE AN 4 SEM 1\\\\SD\\\\DS202230643_Dragusanu_Octavian_1_Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\odrag\\\\OneDrive\\\\Desktop\\\\FACULTATE AN 4 SEM 1\\\\SD\\\\DS202230643_Dragusanu_Octavian_1_Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\odrag\\\\OneDrive\\\\Desktop\\\\FACULTATE AN 4 SEM 1\\\\SD\\\\DS202230643_Dragusanu_Octavian_1_Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\odrag\\\\OneDrive\\\\Desktop\\\\FACULTATE AN 4 SEM 1\\\\SD\\\\DS202230643_Dragusanu_Octavian_1_Frontend\\\\src\\\\device\\\\components\\\\device-form.js\";\nimport React from 'react';\nimport validate from \"./validators/device-validators\";\nimport Button from \"react-bootstrap/Button\";\nimport * as API_DEVICES from \"../api/device-api\";\nimport APIResponseErrorMessage from \"../../commons/errorhandling/api-response-error-message\";\nimport { Col, Row } from \"reactstrap\";\nimport { FormGroup, Input, Label } from 'reactstrap';\n\nvar DeviceForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DeviceForm, _React$Component);\n\n  function DeviceForm(props) {\n    var _this;\n\n    _classCallCheck(this, DeviceForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DeviceForm).call(this, props));\n\n    _this.handleChange = function (event) {\n      var name = event.target.name;\n      var value = event.target.value;\n      var updatedControls = _this.state.formControls;\n      var updatedFormElement = updatedControls[name];\n      updatedFormElement.value = value;\n      updatedFormElement.touched = true;\n      updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n      updatedControls[name] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var updatedFormElementName in updatedControls) {\n        formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\n      }\n\n      _this.setState({\n        formControls: updatedControls,\n        formIsValid: formIsValid\n      });\n    };\n\n    _this.toggleForm = _this.toggleForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reloadHandler = _this.props.reloadHandler;\n    _this.state = {\n      errorStatus: 0,\n      error: null,\n      formIsValid: false,\n      formControls: {\n        user: {\n          value: '',\n          placeholder: 'Insert user id that correspond the device',\n          valid: false,\n          touched: false,\n          validationRules: {\n            isRequired: true\n          }\n        },\n        description: {\n          value: '',\n          placeholder: 'Say something...',\n          valid: false,\n          touched: false\n        },\n        address: {\n          value: '',\n          placeholder: 'Where is the device?',\n          valid: false,\n          touched: false\n        },\n        maxConsumption: {\n          value: '',\n          placeholder: 'Maximum value',\n          valid: false,\n          touched: false\n        }\n      }\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(DeviceForm, [{\n    key: \"toggleForm\",\n    value: function toggleForm() {\n      this.setState({\n        collapseForm: !this.state.collapseForm\n      });\n    }\n  }, {\n    key: \"registerDevice\",\n    value: function registerDevice(device) {\n      var _this2 = this;\n\n      return API_DEVICES.postDevice(device, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"Successfully inserted device with id: \" + result);\n\n          _this2.reloadHandler();\n        } else {\n          _this2.setState({\n            errorStatus: status,\n            error: error\n          });\n        }\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      var device = {\n        user: this.state.formControls.user.value,\n        description: this.state.formControls.description.value,\n        address: this.state.formControls.address.value,\n        maxConsumption: this.state.formControls.maxConsumption.value\n      };\n      console.log(device);\n      this.registerDevice(device);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        id: \"userId\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"userIdField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \" User ID: \"), React.createElement(Input, {\n        name: \"userId\",\n        id: \"userIdField\",\n        placeholder: this.state.formControls.user.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.user.value,\n        touched: this.state.formControls.user.touched ? 1 : 0,\n        valid: this.state.formControls.user.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), this.state.formControls.user.touched && !this.state.formControls.user.valid && React.createElement(\"div\", {\n        className: \"error-messagage row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \" * Id must have at least 3 characters \")), React.createElement(FormGroup, {\n        id: \"description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"descriptionField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \" Description: \"), React.createElement(Input, {\n        name: \"description\",\n        id: \"descriptionField\",\n        placeholder: this.state.formControls.description.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.description.value,\n        touched: this.state.formControls.description.touched ? 1 : 0,\n        valid: this.state.formControls.description.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        id: \"address\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"addressField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \" Address: \"), React.createElement(Input, {\n        name: \"address\",\n        id: \"addressField\",\n        placeholder: this.state.formControls.address.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.address.value,\n        touched: this.state.formControls.address.touched ? 1 : 0,\n        valid: this.state.formControls.address.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        id: \"maxConsumption\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"maxConsumptionField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \" Max Consumption: \"), React.createElement(Input, {\n        name: \"maxConsumption\",\n        id: \"maxConsumptionField\",\n        placeholder: this.state.formControls.maxConsumption.placeholder,\n        min: 0,\n        max: 100,\n        type: \"number\",\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.maxConsumption.value,\n        touched: this.state.formControls.maxConsumption.touched ? 1 : 0,\n        valid: this.state.formControls.maxConsumption.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      })), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '4',\n          offset: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        disabled: !this.state.formIsValid,\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, \"  Submit \"))), this.state.errorStatus > 0 && React.createElement(APIResponseErrorMessage, {\n        errorStatus: this.state.errorStatus,\n        error: this.state.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return DeviceForm;\n}(React.Component);\n\nexport default DeviceForm;","map":{"version":3,"sources":["C:\\Users\\odrag\\OneDrive\\Desktop\\FACULTATE AN 4 SEM 1\\SD\\DS202230643_Dragusanu_Octavian_1_Frontend\\src\\device\\components\\device-form.js"],"names":["React","validate","Button","API_DEVICES","APIResponseErrorMessage","Col","Row","FormGroup","Input","Label","DeviceForm","props","handleChange","event","name","target","value","updatedControls","state","formControls","updatedFormElement","touched","valid","validationRules","formIsValid","updatedFormElementName","setState","toggleForm","bind","reloadHandler","errorStatus","error","user","placeholder","isRequired","description","address","maxConsumption","handleSubmit","collapseForm","device","postDevice","result","status","console","log","registerDevice","size","offset","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACA,OAAOC,uBAAP,MAAoC,wDAApC;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,YAAzB;AACA,SAASC,SAAT,EAAoBC,KAApB,EAA2BC,KAA3B,QAAwC,YAAxC;;IAIMC,U;;;;;AAEF,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,oFAAMA,KAAN;;AADe,UAqDnBC,YArDmB,GAqDJ,UAAAC,KAAK,EAAI;AAEpB,UAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaD,IAA1B;AACA,UAAME,KAAK,GAAGH,KAAK,CAACE,MAAN,CAAaC,KAA3B;AAEA,UAAMC,eAAe,GAAG,MAAKC,KAAL,CAAWC,YAAnC;AAEA,UAAMC,kBAAkB,GAAGH,eAAe,CAACH,IAAD,CAA1C;AAEAM,MAAAA,kBAAkB,CAACJ,KAAnB,GAA2BA,KAA3B;AACAI,MAAAA,kBAAkB,CAACC,OAAnB,GAA6B,IAA7B;AACAD,MAAAA,kBAAkB,CAACE,KAAnB,GAA2BrB,QAAQ,CAACe,KAAD,EAAQI,kBAAkB,CAACG,eAA3B,CAAnC;AACAN,MAAAA,eAAe,CAACH,IAAD,CAAf,GAAwBM,kBAAxB;AAEA,UAAII,WAAW,GAAG,IAAlB;;AACA,WAAK,IAAIC,sBAAT,IAAmCR,eAAnC,EAAoD;AAChDO,QAAAA,WAAW,GAAGP,eAAe,CAACQ,sBAAD,CAAf,CAAwCH,KAAxC,IAAiDE,WAA/D;AACH;;AAED,YAAKE,QAAL,CAAc;AACVP,QAAAA,YAAY,EAAEF,eADJ;AAEVO,QAAAA,WAAW,EAAEA;AAFH,OAAd;AAKH,KA7EkB;;AAEf,UAAKG,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,uDAAlB;AACA,UAAKC,aAAL,GAAqB,MAAKlB,KAAL,CAAWkB,aAAhC;AAEA,UAAKX,KAAL,GAAa;AAETY,MAAAA,WAAW,EAAE,CAFJ;AAGTC,MAAAA,KAAK,EAAE,IAHE;AAKTP,MAAAA,WAAW,EAAE,KALJ;AAOTL,MAAAA,YAAY,EAAE;AACVa,QAAAA,IAAI,EAAE;AACFhB,UAAAA,KAAK,EAAE,EADL;AAEFiB,UAAAA,WAAW,EAAE,2CAFX;AAGFX,UAAAA,KAAK,EAAE,KAHL;AAIFD,UAAAA,OAAO,EAAE,KAJP;AAKFE,UAAAA,eAAe,EAAE;AACbW,YAAAA,UAAU,EAAE;AADC;AALf,SADI;AAUVC,QAAAA,WAAW,EAAE;AACTnB,UAAAA,KAAK,EAAE,EADE;AAETiB,UAAAA,WAAW,EAAE,kBAFJ;AAGTX,UAAAA,KAAK,EAAE,KAHE;AAITD,UAAAA,OAAO,EAAE;AAJA,SAVH;AAgBVe,QAAAA,OAAO,EAAE;AACLpB,UAAAA,KAAK,EAAE,EADF;AAELiB,UAAAA,WAAW,EAAE,sBAFR;AAGLX,UAAAA,KAAK,EAAE,KAHF;AAILD,UAAAA,OAAO,EAAE;AAJJ,SAhBC;AAuBVgB,QAAAA,cAAc,EAAE;AACZrB,UAAAA,KAAK,EAAE,EADK;AAEZiB,UAAAA,WAAW,EAAE,eAFD;AAGZX,UAAAA,KAAK,EAAE,KAHK;AAIZD,UAAAA,OAAO,EAAE;AAJG;AAvBN;AAPL,KAAb;AAuCA,UAAKT,YAAL,GAAoB,MAAKA,YAAL,CAAkBgB,IAAlB,uDAApB;AACA,UAAKU,YAAL,GAAoB,MAAKA,YAAL,CAAkBV,IAAlB,uDAApB;AA7Ce;AA8ClB;;;;iCAEY;AACT,WAAKF,QAAL,CAAc;AAAEa,QAAAA,YAAY,EAAE,CAAC,KAAKrB,KAAL,CAAWqB;AAA5B,OAAd;AACH;;;mCA6BcC,M,EAAQ;AAAA;;AACnB,aAAOrC,WAAW,CAACsC,UAAZ,CAAuBD,MAAvB,EAA+B,UAACE,MAAD,EAASC,MAAT,EAAiBZ,KAAjB,EAA2B;AAC7D,YAAIW,MAAM,KAAK,IAAX,KAAoBC,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjD,CAAJ,EAA2D;AACvDC,UAAAA,OAAO,CAACC,GAAR,CAAY,2CAA2CH,MAAvD;;AACA,UAAA,MAAI,CAACb,aAAL;AACH,SAHD,MAGO;AACH,UAAA,MAAI,CAACH,QAAL,CAAe;AACXI,YAAAA,WAAW,EAAEa,MADF;AAEXZ,YAAAA,KAAK,EAAEA;AAFI,WAAf;AAIH;AACJ,OAVM,CAAP;AAWH;;;mCAEc;AACX,UAAIS,MAAM,GAAG;AACTR,QAAAA,IAAI,EAAE,KAAKd,KAAL,CAAWC,YAAX,CAAwBa,IAAxB,CAA6BhB,KAD1B;AAETmB,QAAAA,WAAW,EAAE,KAAKjB,KAAL,CAAWC,YAAX,CAAwBgB,WAAxB,CAAoCnB,KAFxC;AAGToB,QAAAA,OAAO,EAAE,KAAKlB,KAAL,CAAWC,YAAX,CAAwBiB,OAAxB,CAAgCpB,KAHhC;AAITqB,QAAAA,cAAc,EAAE,KAAKnB,KAAL,CAAWC,YAAX,CAAwBkB,cAAxB,CAAuCrB;AAJ9C,OAAb;AAOA4B,MAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACA,WAAKM,cAAL,CAAoBN,MAApB;AACH;;;6BAEQ;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,oBAAC,SAAD;AAAW,QAAA,EAAE,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,EAAE,EAAC,aAAxB;AAAsC,QAAA,WAAW,EAAE,KAAKtB,KAAL,CAAWC,YAAX,CAAwBa,IAAxB,CAA6BC,WAAhF;AACI,QAAA,QAAQ,EAAE,KAAKrB,YADnB;AAEI,QAAA,YAAY,EAAE,KAAKM,KAAL,CAAWC,YAAX,CAAwBa,IAAxB,CAA6BhB,KAF/C;AAGI,QAAA,OAAO,EAAE,KAAKE,KAAL,CAAWC,YAAX,CAAwBa,IAAxB,CAA6BX,OAA7B,GAAuC,CAAvC,GAA2C,CAHxD;AAII,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,YAAX,CAAwBa,IAAxB,CAA6BV,KAJxC;AAKI,QAAA,QAAQ,MALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EASM,KAAKJ,KAAL,CAAWC,YAAX,CAAwBa,IAAxB,CAA6BX,OAA7B,IAAwC,CAAC,KAAKH,KAAL,CAAWC,YAAX,CAAwBa,IAAxB,CAA6BV,KAAtE,IACF;AAAK,QAAA,SAAS,EAAE,qBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAVJ,CAFJ,EAgBI,oBAAC,SAAD;AAAW,QAAA,EAAE,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,kBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,EAEI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,EAAE,EAAC,kBAA7B;AAAgD,QAAA,WAAW,EAAE,KAAKJ,KAAL,CAAWC,YAAX,CAAwBgB,WAAxB,CAAoCF,WAAjG;AACI,QAAA,QAAQ,EAAE,KAAKrB,YADnB;AAEI,QAAA,YAAY,EAAE,KAAKM,KAAL,CAAWC,YAAX,CAAwBgB,WAAxB,CAAoCnB,KAFtD;AAGI,QAAA,OAAO,EAAE,KAAKE,KAAL,CAAWC,YAAX,CAAwBgB,WAAxB,CAAoCd,OAApC,GAA8C,CAA9C,GAAkD,CAH/D;AAII,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,YAAX,CAAwBgB,WAAxB,CAAoCb,KAJ/C;AAKI,QAAA,QAAQ,MALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CAhBJ,EA4BI,oBAAC,SAAD;AAAW,QAAA,EAAE,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,cAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,SAAZ;AAAsB,QAAA,EAAE,EAAC,cAAzB;AAAwC,QAAA,WAAW,EAAE,KAAKJ,KAAL,CAAWC,YAAX,CAAwBiB,OAAxB,CAAgCH,WAArF;AACI,QAAA,QAAQ,EAAE,KAAKrB,YADnB;AAEI,QAAA,YAAY,EAAE,KAAKM,KAAL,CAAWC,YAAX,CAAwBiB,OAAxB,CAAgCpB,KAFlD;AAGI,QAAA,OAAO,EAAE,KAAKE,KAAL,CAAWC,YAAX,CAAwBiB,OAAxB,CAAgCf,OAAhC,GAA0C,CAA1C,GAA8C,CAH3D;AAII,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,YAAX,CAAwBiB,OAAxB,CAAgCd,KAJ3C;AAKI,QAAA,QAAQ,MALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CA5BJ,EAuCI,oBAAC,SAAD;AAAW,QAAA,EAAE,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,qBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,EAEI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,gBAAZ;AAA6B,QAAA,EAAE,EAAC,qBAAhC;AAAsD,QAAA,WAAW,EAAE,KAAKJ,KAAL,CAAWC,YAAX,CAAwBkB,cAAxB,CAAuCJ,WAA1G;AACI,QAAA,GAAG,EAAE,CADT;AACY,QAAA,GAAG,EAAE,GADjB;AACsB,QAAA,IAAI,EAAC,QAD3B;AAEI,QAAA,QAAQ,EAAE,KAAKrB,YAFnB;AAGI,QAAA,YAAY,EAAE,KAAKM,KAAL,CAAWC,YAAX,CAAwBkB,cAAxB,CAAuCrB,KAHzD;AAII,QAAA,OAAO,EAAE,KAAKE,KAAL,CAAWC,YAAX,CAAwBkB,cAAxB,CAAuChB,OAAvC,GAAiD,CAAjD,GAAqD,CAJlE;AAKI,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,YAAX,CAAwBkB,cAAxB,CAAuCf,KALlD;AAMI,QAAA,QAAQ,MANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CAvCJ,EAmDI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE;AAAEyB,UAAAA,IAAI,EAAE,GAAR;AAAaC,UAAAA,MAAM,EAAE;AAArB,SAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAE,QAAd;AAAwB,QAAA,QAAQ,EAAE,CAAC,KAAK9B,KAAL,CAAWM,WAA9C;AAA2D,QAAA,OAAO,EAAE,KAAKc,YAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,CADJ,CAnDJ,EA0DQ,KAAKpB,KAAL,CAAWY,WAAX,GAAyB,CAAzB,IACA,oBAAC,uBAAD;AAAyB,QAAA,WAAW,EAAE,KAAKZ,KAAL,CAAWY,WAAjD;AAA8D,QAAA,KAAK,EAAE,KAAKZ,KAAL,CAAWa,KAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA3DR,CADJ;AAgEH;;;;EA5KoB/B,KAAK,CAACiD,S;;AA+K/B,eAAevC,UAAf","sourcesContent":["import React from 'react';\r\nimport validate from \"./validators/device-validators\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport * as API_DEVICES from \"../api/device-api\";\r\nimport APIResponseErrorMessage from \"../../commons/errorhandling/api-response-error-message\";\r\nimport { Col, Row } from \"reactstrap\";\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\n\r\n\r\n\r\nclass DeviceForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.reloadHandler = this.props.reloadHandler;\r\n\r\n        this.state = {\r\n\r\n            errorStatus: 0,\r\n            error: null,\r\n\r\n            formIsValid: false,\r\n\r\n            formControls: {\r\n                user: {\r\n                    value: '',\r\n                    placeholder: 'Insert user id that correspond the device',\r\n                    valid: false,\r\n                    touched: false,\r\n                    validationRules: {\r\n                        isRequired: true\r\n                    }\r\n                },\r\n                description: {\r\n                    value: '',\r\n                    placeholder: 'Say something...',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n                address: {\r\n                    value: '',\r\n                    placeholder: 'Where is the device?',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n\r\n                maxConsumption: {\r\n                    value: '',\r\n                    placeholder: 'Maximum value',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n            }\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleForm() {\r\n        this.setState({ collapseForm: !this.state.collapseForm });\r\n    }\r\n\r\n\r\n    handleChange = event => {\r\n\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        const updatedControls = this.state.formControls;\r\n\r\n        const updatedFormElement = updatedControls[name];\r\n\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.touched = true;\r\n        updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\r\n        updatedControls[name] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let updatedFormElementName in updatedControls) {\r\n            formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            formControls: updatedControls,\r\n            formIsValid: formIsValid\r\n        });\r\n\r\n    };\r\n\r\n    registerDevice(device) {\r\n        return API_DEVICES.postDevice(device, (result, status, error) => {\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                console.log(\"Successfully inserted device with id: \" + result);\r\n                this.reloadHandler();\r\n            } else {\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: error\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit() {\r\n        let device = {\r\n            user: this.state.formControls.user.value,\r\n            description: this.state.formControls.description.value,\r\n            address: this.state.formControls.address.value,\r\n            maxConsumption: this.state.formControls.maxConsumption.value\r\n        };\r\n\r\n        console.log(device);\r\n        this.registerDevice(device);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <FormGroup id='userId'>\r\n                    <Label for='userIdField'> User ID: </Label>\r\n                    <Input name='userId' id='userIdField' placeholder={this.state.formControls.user.placeholder}\r\n                        onChange={this.handleChange}\r\n                        defaultValue={this.state.formControls.user.value}\r\n                        touched={this.state.formControls.user.touched ? 1 : 0}\r\n                        valid={this.state.formControls.user.valid}\r\n                        required\r\n                    />\r\n                     {this.state.formControls.user.touched && !this.state.formControls.user.valid &&\r\n                    <div className={\"error-messagage row\"}> * Id must have at least 3 characters </div>}\r\n                \r\n                </FormGroup>\r\n\r\n                <FormGroup id='description'>\r\n                    <Label for='descriptionField'> Description: </Label>\r\n                    <Input name='description' id='descriptionField' placeholder={this.state.formControls.description.placeholder}\r\n                        onChange={this.handleChange}\r\n                        defaultValue={this.state.formControls.description.value}\r\n                        touched={this.state.formControls.description.touched ? 1 : 0}\r\n                        valid={this.state.formControls.description.valid}\r\n                        required\r\n                    />\r\n        \r\n                </FormGroup>\r\n\r\n                <FormGroup id='address'>\r\n                    <Label for='addressField'> Address: </Label>\r\n                    <Input name='address' id='addressField' placeholder={this.state.formControls.address.placeholder}\r\n                        onChange={this.handleChange}\r\n                        defaultValue={this.state.formControls.address.value}\r\n                        touched={this.state.formControls.address.touched ? 1 : 0}\r\n                        valid={this.state.formControls.address.valid}\r\n                        required\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup id='maxConsumption'>\r\n                    <Label for='maxConsumptionField'> Max Consumption: </Label>\r\n                    <Input name='maxConsumption' id='maxConsumptionField' placeholder={this.state.formControls.maxConsumption.placeholder}\r\n                        min={0} max={100} type=\"number\"\r\n                        onChange={this.handleChange}\r\n                        defaultValue={this.state.formControls.maxConsumption.value}\r\n                        touched={this.state.formControls.maxConsumption.touched ? 1 : 0}\r\n                        valid={this.state.formControls.maxConsumption.valid}\r\n                        required\r\n                    />\r\n                </FormGroup>\r\n\r\n                <Row>\r\n                    <Col sm={{ size: '4', offset: 8 }}>\r\n                        <Button type={\"submit\"} disabled={!this.state.formIsValid} onClick={this.handleSubmit}>  Submit </Button>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {\r\n                    this.state.errorStatus > 0 &&\r\n                    <APIResponseErrorMessage errorStatus={this.state.errorStatus} error={this.state.error} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DeviceForm;\r\n"]},"metadata":{},"sourceType":"module"}